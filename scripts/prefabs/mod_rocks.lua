local cristalyiumOreAssets = {
    Asset("ANIM","anim/cristalyium_ore.zip"),
    Asset("MINIMAP_IMAGE","cristalyium_ore")
}

local prefabs = {
    "raw_cristalyium",
    "rock_break_fx",
    "collapse_small",
}

SetSharedLootTable("loot_cristalyium_ore", {
    {"raw_cristalyium", 1.00},
    {"raw_cristalyium", 1.00},
})

local function OnWork(inst, worker, workleft)
    if workleft <= 0 then
        local pt = inst:GetPosition()
        SpawnPrefab("rock_break_fx").Transform:SetPosition(pt.x, pt.y, pt.z)
        inst.components.lootdropper:DropLoot(pt)

        if inst.showCloudFXwhenRemoved then
            local fx = SpawnPrefab("collapse_small")
            fx.Transform:SetPosition(pt.x, pt.y, pt.z)
        end

		if not inst.doNotRemoveOnWorkDone then
	        inst:Remove()
		end
    else
        inst.AnimState:PlayAnimation(
            (workleft < TUNING.ROCKS_MINE / 3 and "low") or
            (workleft < TUNING.ROCKS_MINE * 2 / 3 and "med") or
            "full"
        )
    end
end

local function baserock_fn(bank, build, anim, minimapicon, tag, multcolour)
    local inst = CreateEntity()

    inst.entity:AddTransform()
    inst.entity:AddAnimState()
    inst.entity:AddSoundEmitter()
    inst.entity:AddMiniMapEntity()
    inst.entity:AddNetwork()

    MakeObstaclePhysics(inst, 1)

    if minimapicon then
        inst.MiniMapEntity:SetIcon(minimapicon)
    end

    inst.AnimState:SetBank(bank)
    inst.AnimState:SetBuild(build)

    if type(anim) == "table" then
        for i, v in ipairs(anim) do
            if i == 1 then
                inst.AnimState:PlayAnimation(v)
                inst.scrapbook_anim = v
            else
                inst.AnimState:PushAnimation(v, false)
            end
        end
    else
        inst.AnimState:PlayAnimation(anim)
        inst.scrapbook_anim = anim
    end

    MakeSnowCoveredPristine(inst)

    inst:AddTag("boulder")
    if tag then
        inst:AddTag(tag)
    end

    inst.entity:SetPristine()

    if not TheWorld.ismastersim then
        return inst
    end

    -- NOTE(DiogoW): Only use dependencies generated by lootdroper.
    inst.scrapbook_deps = {}

    inst:AddComponent("lootdropper")

    local workable = inst:AddComponent("workable")
    workable:SetWorkAction(ACTIONS.MINE)
    workable:SetWorkLeft(TUNING.ROCKS_MINE)
    workable:SetOnWorkCallback(OnWork)

    multcolour = multcolour or 0.5
    if 0 <= multcolour and multcolour < 1 then
        local colour = multcolour + math.random() * (1.0 - multcolour)
        inst.AnimState:SetMultColour(colour, colour, colour, 1)
    end

    inst:AddComponent("inspectable")
    inst.components.inspectable.nameoverride = "ROCK"

    MakeSnowCovered(inst)
    SetLunarHailBuildupAmountSmall(inst)

    MakeHauntableWork(inst)

    return inst
end

local function onSaveCristalyiumOre(inst, data)
    data.rock_type = inst.rock_type
end

local function setCristalyiumOre(inst, new_type)
    inst.rock_type = new_type
    local anim_name = "cristalyium_ore_"..tostring(new_type)
    inst.AnimState:SetBank(anim_name)
end

local function onLoadCristalyiumOre(inst, data)
    if data and data.rock_type then
        setCristalyiumOre(inst, data.rock_type)
    end
end

local function fnCristalyiumOre()
    local inst = baserock_fn("cristalyium_ore", "moonglass_rcristalyium_oreock", "full", "cristalyium_ore.tex", "cristalyium_ore", 1.0)

    inst:SetPrefabName("cristalyium_ore")
    inst.AnimState:SetBuild("cristalyium_ore")

    if not TheWorld.ismastersim then
        return inst
    end

    inst.scrapbook_bank  = "cristalyium_ore"
    inst.scrapbook_build = "cristalyium_ore"

    setCristalyiumOre(inst, math.random(1, 4))

    inst.components.inspectable.nameoverride = "CRISTALYIUM_ORE"
    inst.components.lootdropper:SetChanceLootTable('loot_cristalyium_ore')

    inst.OnSave = onSaveCristalyiumOre
    inst.OnLoad = onLoadCristalyiumOre

    return inst
end

return Prefab("cristalyium_ore", fnCristalyiumOre, cristalyiumOreAssets, prefabs)